1. console.clear()

    Propósito: Limpia la consola del navegador.
    Uso:

    console.clear();

2. console.error()

    Propósito: Muestra mensajes de error en la consola, generalmente con estilo rojo.
    Uso:

    console.error("Este es un mensaje de error");

3. console.info()

    Propósito: Muestra información en la consola. Similar a log(), pero estilizado como información.
    Uso:

    console.info("Información importante");

4. console.log()

    Propósito: Muestra mensajes generales en la consola.
    Uso:

    console.log("Esto es un mensaje general");

5. console.table()

    Propósito: Muestra datos en forma de tabla (ideal para objetos y arrays).
    Uso:

    const usuarios = [
        { nombre: "Juan", edad: 25 },
        { nombre: "Ana", edad: 30 }
    ];
    console.table(usuarios);

6. console.warn()

    Propósito: Muestra advertencias en la consola, generalmente en amarillo.
    Uso:

    console.warn("Esto es una advertencia");

7. console.dir()

    Propósito: Muestra una representación interactiva de un objeto, útil para inspeccionar sus propiedades.
    Uso:

    const obj = { nombre: "Juan", edad: 25 };
    console.dir(obj);

Diferencias clave:

    log() es para mensajes generales.
    info(), warn() y error() son para mensajes con diferentes niveles de importancia.
    table() formatea datos estructurados.
    dir() detalla los objetos.
    clear() reinicia la consola.

1. console.count()

    Propósito: Cuenta cuántas veces se ejecuta el mismo mensaje o etiqueta.
    Uso:

    console.count("Clics");
    console.count("Clics");
    // Salida:
    // Clics: 1
    // Clics: 2

2. console.countReset()

    Propósito: Reinicia el contador para una etiqueta dada.
    Uso:

    console.count("Clics");
    console.count("Clics");
    console.countReset("Clics");
    console.count("Clics");
    // Salida:
    // Clics: 1
    // Clics: 2
    // (contador reiniciado)
    // Clics: 1

3. console.group()

    Propósito: Agrupa mensajes en la consola bajo una misma sección que puede expandirse o colapsarse.
    Uso:

    console.group("Grupo A");
    console.log("Mensaje 1");
    console.log("Mensaje 2");
    console.groupEnd();
    // Salida:
    // Grupo A
    //   Mensaje 1
    //   Mensaje 2

4. console.groupEnd()

    Propósito: Finaliza un grupo iniciado con console.group().
    Uso: No requiere argumentos. Solo cierra el grupo activo más reciente.

5. console.groupCollapsed()

    Propósito: Similar a console.group(), pero el grupo comienza colapsado por defecto.
    Uso:

    console.groupCollapsed("Grupo B");
    console.log("Mensaje 1");
    console.log("Mensaje 2");
    console.groupEnd();
    // Salida (colapsado inicialmente):
    // Grupo B
    //   Mensaje 1
    //   Mensaje 2

Diferencias clave:

    count(): Lleva un registro de cuántas veces se llama una etiqueta.
    countReset(): Reinicia el contador de una etiqueta.
    **group() y groupCollapsed(): Agrupan mensajes, con la diferencia de que el segundo inicia colapsado.
    groupEnd(): Cierra el grupo abierto más reciente.

1. console.time()

    Propósito: Inicia un temporizador para medir el tiempo que transcurre entre eventos.
    Uso:

console.time("Proceso");
// Código que deseas medir
console.timeEnd("Proceso");

Salida: Muestra el tiempo transcurrido en milisegundos con la etiqueta proporcionada.

    Proceso: 123.456 ms

2. console.timeEnd()

    Propósito: Detiene un temporizador iniciado con console.time() y muestra el tiempo transcurrido.
    Uso:

console.time("Carga");
for (let i = 0; i < 1000000; i++) { /* Proceso */ }
console.timeEnd("Carga");

Salida:

    Carga: 45.678 ms

3. console.timeLog()

    Propósito: Registra el tiempo transcurrido hasta el momento sin detener el temporizador.
    Uso:

console.time("Proceso Lento");
setTimeout(() => {
  console.timeLog("Proceso Lento"); // Registra el tiempo transcurrido hasta aquí
  console.timeEnd("Proceso Lento"); // Detiene el temporizador
}, 1000);

Salida:

    Proceso Lento: 1001.234 ms
    Proceso Lento: 1001.234 ms (al finalizar)

Diferencias clave:

    time(): Inicia el temporizador.
    timeLog(): Muestra el tiempo actual transcurrido desde que se inició el temporizador, pero no lo detiene.
    timeEnd(): Finaliza el temporizador y muestra el tiempo total.  